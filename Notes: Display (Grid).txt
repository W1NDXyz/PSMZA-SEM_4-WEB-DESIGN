Grid:
- A powerful layout system that allows you to design complex web layouts with rows and columns.
- It's more flexible than Flexbox when dealing with two-dimensional layouts (both rows & columns).
📌 You can go to the bottom for more understanding (difference between grid and flexbox | summary)


🔹 Basics of CSS Grid
  - To use CSS Grid, set display: grid; on the parent container. 
  - Then, define the structure with grid-template-columns and grid-template-rows.

.container {
    display: grid;
    grid-template-columns: 200px 200px 200px;                            /* 3 columns of 200px */
    grid-template-rows: 100px 100px;                                    /* 2 rows of 100px */
    gap: 10px;                                                         /* Space between grid items */
}


🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹 Defining Columns & Rows🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹


1️⃣ grid-template-columns & grid-template-rows
  - These properties define how many columns & rows you want.


.container {
    display: grid;
    grid-template-columns: 100px 200px 300px;              /* First column 100px, second 200px, third 300px */
    grid-template-rows: 150px 150px;                       /* Two rows, each 150px */
}


---------------------------------------------------------------------------------------------------------------
🔸 Using fr (Fractional Unit)
  - Instead of fixed sizes, you can use fr to divide available space proportionally.
.container {
    display: grid;
    grid-template-columns: 1fr 2fr;       /* First column takes 1 part, second column takes 2 parts */
}

✅ Example:
If the container width is 600px, the first column will be 200px, and the second column will be 400px.
---------------------------------------------------------------------------------------------------------------


2️⃣ Placing Items in the Grid
  - You can position items in specific rows and columns using grid-column and grid-row.

.item1 {
    grid-column: 1 / 3;         /* Starts at column 1, ends before column 3 */
    grid-row: 1 / 2;            /* Starts at row 1, ends before row 2 */
}


🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹grid-auto Properties🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹

3️⃣ grid-auto-rows & grid-auto-columns
 - These define default sizes for rows or columns if they aren’t explicitly set.

.container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-auto-rows: minmax(100px, auto); /* Minimum 100px, but can grow */
}



🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹 Spanning Multiple Columns or Rows🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹
You can make an item take up more space with span.

.item {
    grid-column: span 2; /* This item will cover 2 columns */
}



🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹Aligning Content in the Grid🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹
3️⃣ Aligning Items
There are 4 alignment properties:

  1. justify-items: 	Align items horizontally in each grid cell
  2. align-items: 	Align items vertically in each grid cell
  3. justify-content: 	Align the entire grid horizontally
  4. align-content: 	Align the entire grid vertically

.container {
    display: grid;
    justify-items: center; /* Centers each grid item horizontally */
    align-items: center; /* Centers each grid item vertically */
}



🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹grid-template-areas (Naming Layouts)🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹
   - Instead of manually placing items, you can name areas for better readability.

.container {
    display: grid;
    grid-template-areas: 
        "header header"
        "sidebar content"
        "footer footer";
    grid-template-columns: 1fr 2fr;
    grid-template-rows: 80px 300px 50px;
}


Then, assign each child element to a named area:
.header {
    grid-area: header;
}
.sidebar {
    grid-area: sidebar;
}
.content {
    grid-area: content;
}
.footer {
    grid-area: footer;
}



🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹 Complete Example 🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Grid Example</title>
    <style>
        .container {
            display: grid;
            grid-template-columns: 1fr 2fr; /* Two columns */
            grid-template-rows: 80px 200px 50px; /* Three rows */
            gap: 10px;
            grid-template-areas: 
                "header header"
                "sidebar content"
                "footer footer";
        }

        .header {
            grid-area: header;
            background-color: lightblue;
            text-align: center;
        }

        .sidebar {
            grid-area: sidebar;
            background-color: lightcoral;
        }

        .content {
            grid-area: content;
            background-color: lightgreen;
        }

        .footer {
            grid-area: footer;
            background-color: gray;
            text-align: center;
        }
    </style>
</head>
<body>

    <div class="container">
        <div class="header">Header</div>
        <div class="sidebar">Sidebar</div>
        <div class="content">Main Content</div>
        <div class="footer">Footer</div>
    </div>

</body>
</html>
🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹






📌 When to Use Grid vs Flexbox?
_______________________________________________________________________________________________________
|  Feature	        |            Grid	                   |             Flexbox                        |
------------------------------------------------------------------------------------------------------- 
|  Layout          |      Type	2D (rows & columns)	     |      1D (either row or column)             |
|  Best For	       |     Full-page layouts	             |      Aligning items inside a container     |
|  Complexity	     |     More structured	               |      More flexible                         |
_______________________________________________________________________________________________________

✅ Use Grid when designing entire layouts.
✅ Use Flexbox when aligning items inside a container.




🎯 Summary
✔ display: grid; creates a grid container.
✔ grid-template-columns & grid-template-rows define the structure.
✔ grid-column & grid-row control item placement.
✔ align-items, justify-items, align-content, and justify-content control alignment.
✔ grid-template-areas makes layouts easier to read.










